---
- name: Install and configure ByteFreezer Proxy service
  hosts: all
  become: yes
  vars:
    bytefreezer_binary_dest: "/usr/local/bin/bytefreezer-proxy"
    bytefreezer_config_path: "/etc/bytefreezer-proxy/config.yaml"
    bytefreezer_log_dir: "/var/log/bytefreezer-proxy"
    bytefreezer_service_path: "/etc/systemd/system/bytefreezer-proxy.service"
    bytefreezer_logrotate_path: "/etc/logrotate.d/bytefreezer-proxy"
    bytefreezer_spooling_dir: "/var/spool/bytefreezer-proxy"
    github_repo: "{{ bytefreezer_proxy_github_repo | default('n0needt0/bytefreezer-proxy') }}"
    version: "{{ bytefreezer_proxy_version | default('latest') }}"
    release_url: "https://api.github.com/repos/{{ github_repo }}/releases/latest"
    binary_name: "bytefreezer-proxy-linux-amd64"

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: "{{ bytefreezer_service_path }}"
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use remove playbook first."
      when: service_exists.stat.exists

  tasks:
    - name: Set download URL
      set_fact:
        download_url: "https://github.com/{{ github_repo }}/releases/{{ 'latest/download' if version == 'latest' else 'download/' + version }}/{{ binary_name }}.tar.gz"

    - name: Create temporary directory for download
      ansible.builtin.tempfile:
        state: directory
        suffix: bytefreezer
      register: temp_dir

    - name: Download and extract binary
      ansible.builtin.unarchive:
        src: "{{ download_url }}"
        dest: "{{ temp_dir.path }}"
        remote_src: yes
      
    - name: Copy binary to /usr/local/bin
      ansible.builtin.copy:
        src: "{{ temp_dir.path }}/{{ binary_name }}"
        dest: "{{ bytefreezer_binary_dest }}"
        mode: '0755'

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_config_path | dirname }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: yes
      
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_log_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: yes
      
    - name: Ensure spooling directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_spooling_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: yes
      
    - name: Generate configuration file
      ansible.builtin.template:
        src: config.yaml.j2
        dest: "{{ bytefreezer_config_path }}"
        owner: root
        group: root
        mode: '0644'
      become: yes
      
    - name: Install logrotate configuration
      ansible.builtin.copy:
        dest: "{{ bytefreezer_logrotate_path }}"
        content: |
          {{ bytefreezer_log_dir }}/*.log {
            daily
            rotate 7
            compress
            missingok
            notifempty
            create 0644 root root
            sharedscripts
            postrotate
              systemctl restart bytefreezer-proxy >/dev/null 2>&1 || true
            endscript
          }
        mode: '0644'
      become: yes
      
    - name: Create systemd service file
      ansible.builtin.template:
        src: bytefreezer-proxy.service.j2
        dest: "{{ bytefreezer_service_path }}"
        mode: '0644'
      become: yes
      notify: Reload systemd

    - name: Enable and start service
      ansible.builtin.systemd:
        name: bytefreezer-proxy
        enabled: yes
        state: started
        daemon_reload: true
      become: yes

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

  post_tasks:
    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Binary: {{ bytefreezer_binary_dest }}"
          - "Config: {{ bytefreezer_config_path }}"
          - "Logs: {{ bytefreezer_log_dir }}"
          - "Spooling: {{ bytefreezer_spooling_dir }}"
          - "Service: systemctl status bytefreezer-proxy"

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true