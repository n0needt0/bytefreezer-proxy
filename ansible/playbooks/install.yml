---
- name: Install and configure ByteFreezer Proxy service
  hosts: all
  become: yes

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: "{{ paths.service_path }}"
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use remove playbook first."
      when: service_exists.stat.exists

  tasks:
    - name: Create temporary directory for download
      ansible.builtin.tempfile:
        state: directory
        suffix: bytefreezer
      register: temp_dir

    - name: Download and extract binary
      ansible.builtin.unarchive:
        src: "{{ download.url }}"
        dest: "{{ temp_dir.path }}"
        remote_src: yes
      
    - name: Copy binary to destination
      ansible.builtin.shell: |
        sudo cp "{{ temp_dir.path }}/bytefreezer-proxy-linux-amd64" "{{ paths.binary_path }}"
        sudo chmod 755 "{{ paths.binary_path }}"

    - name: Ensure config directory exists
      ansible.builtin.shell: |
        sudo mkdir -p "{{ paths.config_dir }}"
        sudo chown {{ service.user }}:{{ service.group }} "{{ paths.config_dir }}"
        sudo chmod 755 "{{ paths.config_dir }}"

    - name: Ensure log directory exists
      ansible.builtin.shell: |
        sudo mkdir -p "{{ paths.log_dir }}"
        sudo chown {{ service.user }}:{{ service.group }} "{{ paths.log_dir }}"
        sudo chmod 755 "{{ paths.log_dir }}"
      
    - name: Ensure spooling directory exists
      ansible.builtin.shell: |
        sudo mkdir -p "{{ paths.spool_dir }}"
        sudo chown {{ service.user }}:{{ service.group }} "{{ paths.spool_dir }}"
        sudo chmod 755 "{{ paths.spool_dir }}"
      
    - name: Generate configuration file
      ansible.builtin.template:
        src: config.yaml.j2
        dest: "{{ paths.config_path }}"
        owner: "{{ service.user }}"
        group: "{{ service.group }}"
        mode: '0644'
      
    - name: Install logrotate configuration
      ansible.builtin.template:
        src: logrotate.j2
        dest: "{{ paths.logrotate_path }}"
        owner: root
        group: root
        mode: '0644'
      
    - name: Create systemd service file
      ansible.builtin.template:
        src: bytefreezer-proxy.service.j2
        dest: "{{ paths.service_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start service
      ansible.builtin.shell: |
        timeout 30 sudo systemctl daemon-reload || echo "daemon-reload completed or timed out"
        sudo systemctl enable {{ service.name }}
        sudo systemctl start {{ service.name }}

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

  post_tasks:
    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Binary: {{ paths.binary_path }}"
          - "Config: {{ paths.config_path }}"
          - "Logs: {{ paths.log_dir }}"
          - "Spooling: {{ paths.spool_dir }}"
          - "Service: systemctl status {{ service.name }}"