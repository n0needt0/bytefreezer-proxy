---
- name: Install and configure ByteFreezer Proxy service
  hosts: all
  become: yes
  vars:
    # Fallback variables in case group_vars don't load in AWX
    github_repo: "n0needt0/bytefreezer-proxy"
    version: "{{ bytefreezer_proxy_version | default('latest') }}"
    
    service:
      name: "bytefreezer-proxy"
      user: "root"
      group: "root"
    
    paths:
      binary_dir: "/usr/local/bin"
      binary_path: "/usr/local/bin/bytefreezer-proxy" 
      config_dir: "/etc/bytefreezer-proxy"
      config_path: "/etc/bytefreezer-proxy/config.yaml"
      log_dir: "/var/log/bytefreezer-proxy"
      spool_dir: "/var/spool/bytefreezer-proxy"
      service_path: "/etc/systemd/system/bytefreezer-proxy.service"
      logrotate_path: "/etc/logrotate.d/bytefreezer-proxy"
    
    logrotate:
      rotate_count: 7
    
    config:
      app:
        name: "bytefreezer-proxy"
        version: "0.0.1"
      logging:
        level: "info"
        encoding: "console"
      server:
        api_port: 8088
      udp:
        enabled: true
        host: "0.0.0.0"
        read_buffer_size_bytes: 134217728
        max_batch_lines: 100000
        max_batch_bytes: 268435456
        batch_timeout_seconds: 30
        enable_compression: true
        compression_level: 6
        listeners:
          - port: 2056
            dataset_id: "syslog-data"
          - port: 2057
            dataset_id: "ebpf-data"
          - port: 2058
            dataset_id: "application-logs"
      tenant_id: "customer-1"
      bearer_token: "bearer-token-customer-1-dev"
      receiver:
        base_url: "http://localhost:8080/data/{tenantid}/{datasetid}"
        timeout_seconds: 30
        retry_count: 3
        retry_delay_seconds: 1
      soc:
        enabled: false
        endpoint: ""
        timeout: 30
      otel:
        enabled: false
        endpoint: "localhost:4317"
        service_name: "bytefreezer-proxy"
        scrapeIntervalseconds: 100
      housekeeping:
        enabled: true
        intervalseconds: 60
      spooling:
        enabled: true
        directory: "/var/spool/bytefreezer-proxy"
        max_size_bytes: 1073741824
        retry_attempts: 5
        retry_interval_seconds: 60
        cleanup_interval_seconds: 300
      dev: false
    
    download:
      url: "https://github.com/n0needt0/bytefreezer-proxy/releases/{{ 'latest/download' if version == 'latest' else 'download/' + version }}/bytefreezer-proxy-linux-amd64.tar.gz"

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: "{{ paths.service_path }}"
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use remove playbook first."
      when: service_exists.stat.exists

  tasks:
    - name: Create temporary directory for download
      ansible.builtin.tempfile:
        state: directory
        suffix: bytefreezer
      register: temp_dir

    - name: Download and extract binary
      ansible.builtin.unarchive:
        src: "{{ download.url }}"
        dest: "{{ temp_dir.path }}"
        remote_src: yes
      
    - name: Copy binary to destination
      ansible.builtin.shell: |
        sudo cp "{{ temp_dir.path }}/bytefreezer-proxy-linux-amd64" "{{ paths.binary_path }}"
        sudo chmod 755 "{{ paths.binary_path }}"

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ paths.config_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ paths.log_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      
    - name: Ensure spooling directory exists
      ansible.builtin.file:
        path: "{{ paths.spool_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      
    - name: Generate configuration file
      ansible.builtin.template:
        src: config.yaml.j2
        dest: "{{ paths.config_path }}"
        owner: root
        group: root
        mode: '0644'
      become: yes
      
    - name: Install logrotate configuration
      ansible.builtin.template:
        src: logrotate.j2
        dest: "{{ paths.logrotate_path }}"
        owner: root
        group: root
        mode: '0644'
      
    - name: Create systemd service file
      ansible.builtin.template:
        src: bytefreezer-proxy.service.j2
        dest: "{{ paths.service_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start service
      ansible.builtin.shell: |
        timeout 30 sudo systemctl daemon-reload || echo "daemon-reload completed or timed out"
        sudo systemctl enable {{ service.name }}
        sudo systemctl start {{ service.name }}

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

  post_tasks:
    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Binary: {{ paths.binary_path }}"
          - "Config: {{ paths.config_path }}"
          - "Logs: {{ paths.log_dir }}"
          - "Spooling: {{ paths.spool_dir }}"
          - "Service: systemctl status {{ service.name }}"