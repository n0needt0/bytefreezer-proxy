---
# ByteFreezer Proxy Installation Playbook (Simplified - Service Only)
- name: Install ByteFreezer Proxy
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Architecture mapping for binary downloads
    arch_map:
      x86_64: "amd64"
      aarch64: "arm64"
      armv7l: "arm"
    
    target_arch: "{{ arch_map[ansible_architecture] | default('amd64') }}"
    binary_name: "bytefreezer-proxy-linux-{{ target_arch }}"

    # AWX compatibility - merge survey variables with host-specific config
    merged_config: "{{ bytefreezer_proxy_default_config | combine(bytefreezer_proxy_config | default({}), recursive=True) }}"

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: /etc/systemd/system/{{ bytefreezer_proxy_service_name }}.service
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use remove playbook first."
      when: service_exists.stat.exists

    - name: Update package cache
      ansible.builtin.package:
        update_cache: true
      when: ansible_os_family in ['Debian', 'RedHat']

    - name: Install required packages
      ansible.builtin.package:
        name:
          - curl
          - wget
          - tar
          - systemd
        state: present

  tasks:
    - name: Create bytefreezer user and group
      ansible.builtin.group:
        name: "{{ bytefreezer_proxy_group }}"
        state: present

    - name: Create bytefreezer user
      ansible.builtin.user:
        name: "{{ bytefreezer_proxy_user }}"
        group: "{{ bytefreezer_proxy_group }}"
        system: true
        shell: /bin/false
        home: "{{ bytefreezer_proxy_install_dir }}"
        create_home: false
        state: present

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ bytefreezer_proxy_user }}"
        group: "{{ bytefreezer_proxy_group }}"
        mode: '0755'
      loop:
        - "{{ bytefreezer_proxy_install_dir }}"
        - "{{ bytefreezer_proxy_config_dir }}"
        - "{{ bytefreezer_proxy_log_dir }}"
        - "{{ bytefreezer_proxy_spooling_dir }}"

    - name: Get latest release information from GitHub
      ansible.builtin.uri:
        url: "{{ bytefreezer_proxy_release_url }}"
        method: GET
        return_content: true
      register: github_release
      when: bytefreezer_proxy_version == "latest"
      delegate_to: localhost
      run_once: true

    - name: Set version facts
      set_fact:
        release_version: "{{ github_release.json.tag_name if bytefreezer_proxy_version == 'latest' else bytefreezer_proxy_version }}"
        download_url: "{{ github_release.json.assets | selectattr('name', 'match', '.*' + binary_name + '.tar.gz$') | map(attribute='browser_download_url') | first if bytefreezer_proxy_version == 'latest' else 'https://github.com/' + bytefreezer_proxy_github_repo + '/releases/download/' + bytefreezer_proxy_version + '/' + binary_name + '.tar.gz' }}"

    - name: Display download information
      debug:
        msg: 
          - "Installing version: {{ release_version }}"
          - "Architecture: {{ target_arch }}"
          - "URL: {{ download_url }}"

    - name: Download and extract binary
      unarchive:
        src: "{{ download_url }}"
        dest: "{{ bytefreezer_proxy_install_dir }}"
        remote_src: yes
        owner: "{{ bytefreezer_proxy_user }}"
        group: "{{ bytefreezer_proxy_group }}"
        mode: '0755'
        extra_opts:
          - --strip-components=0

    - name: Rename binary to standard name
      command: >
        mv "{{ bytefreezer_proxy_install_dir }}/{{ binary_name }}" 
           "{{ bytefreezer_proxy_install_dir }}/{{ bytefreezer_proxy_binary_name }}"
      args:
        creates: "{{ bytefreezer_proxy_install_dir }}/{{ bytefreezer_proxy_binary_name }}"

    - name: Set binary permissions
      file:
        path: "{{ bytefreezer_proxy_install_dir }}/{{ bytefreezer_proxy_binary_name }}"
        owner: "{{ bytefreezer_proxy_user }}"
        group: "{{ bytefreezer_proxy_group }}"
        mode: '0755'

    - name: Generate configuration file
      template:
        src: config.yaml.j2
        dest: "{{ bytefreezer_proxy_config_dir }}/config.yaml"
        owner: "{{ bytefreezer_proxy_user }}"
        group: "{{ bytefreezer_proxy_group }}"
        mode: '0640'

    - name: Setup log rotation
      template:
        src: logrotate.conf.j2
        dest: /etc/logrotate.d/bytefreezer-proxy
        owner: root
        group: root
        mode: '0644'
      notify: test-logrotate

    - name: Create systemd service file
      template:
        src: bytefreezer-proxy.service.j2
        dest: /etc/systemd/system/{{ bytefreezer_proxy_service_name }}.service
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload systemd

    - name: Enable and start service
      systemd:
        name: "{{ bytefreezer_proxy_service_name }}"
        enabled: "{{ bytefreezer_proxy_systemd_enabled }}"
        state: "{{ 'started' if bytefreezer_proxy_systemd_started else 'stopped' }}"
        daemon_reload: yes

  post_tasks:
    - name: Wait for service to be ready
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ bytefreezer_proxy_api_port }}/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 10
      delay: 3
      when: bytefreezer_proxy_systemd_started
      ignore_errors: yes

    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Service status: {{ 'Running' if bytefreezer_proxy_systemd_started else 'Stopped' }}"
          - "Config file: {{ bytefreezer_proxy_config_dir }}/config.yaml"
          - "Install directory: {{ bytefreezer_proxy_install_dir }}"
          - "Log directory: {{ bytefreezer_proxy_log_dir }}"
          - "Spooling directory: {{ bytefreezer_proxy_spooling_dir }}"
          - "Logs: journalctl -u {{ bytefreezer_proxy_service_name }} -f"
          - "NOTE: Firewall and system tuning must be configured manually"

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: test-logrotate
      command: logrotate -t /etc/logrotate.d/bytefreezer-proxy
      ignore_errors: yes