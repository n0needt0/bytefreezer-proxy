---
- name: Install and configure ByteFreezer Proxy service (Docker binary extraction)
  hosts: all
  become: yes
  vars:
    # Fallback variables in case group_vars don't load in AWX
    github_repo: "n0needt0/bytefreezer-proxy"
    version: "{{ bytefreezer_proxy_version | default('latest') }}"
    github_repo_owner: "{{ bytefreezer_github_repo_owner | default('n0needt0') }}"
    container_image: "ghcr.io/{{ github_repo_owner }}/bytefreezer-proxy:{{ version }}"
    
    service:
      name: "bytefreezer-proxy"
      user: "root"
      group: "root"
    
    paths:
      binary_dir: "/usr/local/bin"
      binary_path: "/usr/local/bin/bytefreezer-proxy" 
      config_dir: "/etc/bytefreezer-proxy"
      config_path: "/etc/bytefreezer-proxy/config.yaml"
      log_dir: "/var/log/bytefreezer-proxy"
      spool_dir: "/var/spool/bytefreezer-proxy"
      service_path: "/etc/systemd/system/bytefreezer-proxy.service"
      logrotate_path: "/etc/logrotate.d/bytefreezer-proxy"
    
    logrotate:
      rotate_count: 7
    
    config:
      app:
        name: "bytefreezer-proxy"
        version: "0.0.1"
      logging:
        level: "info"
        encoding: "console"
      server:
        api_port: 8088
      udp:
        enabled: true
        host: "0.0.0.0"
        read_buffer_size_bytes: 134217728
        max_batch_lines: 100000
        max_batch_bytes: 268435456
        batch_timeout_seconds: 30
        enable_compression: true
        compression_level: 6
        listeners:
          - port: 2056
            dataset_id: "syslog-data"
          - port: 2057
            dataset_id: "ebpf-data"
          - port: 2058
            dataset_id: "application-logs"
      tenant_id: "customer-1"
      bearer_token: "bearer-token-customer-1-dev"
      receiver:
        base_url: "http://localhost:8080/data/{tenantid}/{datasetid}"
        timeout_seconds: 30
        retry_count: 3
        retry_delay_seconds: 1
      soc:
        enabled: false
        endpoint: ""
        timeout: 30
      otel:
        enabled: false
        endpoint: "localhost:4317"
        service_name: "bytefreezer-proxy"
        scrapeIntervalseconds: 100
      housekeeping:
        enabled: true
        intervalseconds: 60
      spooling:
        enabled: true
        directory: "/var/spool/bytefreezer-proxy"
        max_size_bytes: 1073741824
        retry_attempts: 5
        retry_interval_seconds: 60
        cleanup_interval_seconds: 300
      dev: false

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: "{{ paths.service_path }}"
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use docker_remove playbook first."
      when: service_exists.stat.exists

    - name: Verify Docker is installed and running
      ansible.builtin.service_facts:
      register: services

    - name: Check if Docker service exists
      fail:
        msg: "Docker is not installed or running. Please install Docker first."
      when: "'docker.service' not in services.ansible_facts.services or services.ansible_facts.services['docker.service'].state != 'running'"

    - name: Test Docker access
      ansible.builtin.shell: docker info
      register: docker_test
      failed_when: docker_test.rc != 0
      become: yes

  tasks:
    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: bytefreezer
      register: temp_dir

    - name: Pull binary from container image
      ansible.builtin.shell: |
        docker run --rm -v {{ temp_dir.path }}:/output \
          {{ container_image }} \
          sh -c "cp /bytefreezer-proxy /output/"
      register: docker_extract
      failed_when: docker_extract.rc != 0

    - name: Verify binary was extracted
      ansible.builtin.stat:
        path: "{{ temp_dir.path }}/bytefreezer-proxy"
      register: extracted_binary
      failed_when: not extracted_binary.stat.exists

    - name: Copy binary to destination
      ansible.builtin.copy:
        src: "{{ temp_dir.path }}/bytefreezer-proxy"
        dest: "{{ paths.binary_path }}"
        mode: '0755'
        remote_src: yes

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ paths.config_dir }}"
        state: directory
        owner: "{{ service.user }}"
        group: "{{ service.group }}"
        mode: '0755'

    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ paths.log_dir }}"
        state: directory
        owner: "{{ service.user }}"
        group: "{{ service.group }}"
        mode: '0755'

    - name: Ensure spooling directory exists
      ansible.builtin.file:
        path: "{{ paths.spool_dir }}"
        state: directory
        owner: "{{ service.user }}"
        group: "{{ service.group }}"
        mode: '0755'

    - name: Generate configuration file
      ansible.builtin.template:
        src: config.yaml.j2
        dest: "{{ paths.config_path }}"
        owner: "{{ service.user }}"
        group: "{{ service.group }}"
        mode: '0644'
 
    - name: Install logrotate configuration
      ansible.builtin.template:
        src: logrotate.j2
        dest: "{{ paths.logrotate_path }}"
        owner: root
        group: root
        mode: '0644'
  
    - name: Create systemd service file
      ansible.builtin.template:
        src: bytefreezer-proxy.service.j2
        dest: "{{ paths.service_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start service
      ansible.builtin.systemd:
        name: "{{ service.name }}"
        enabled: yes
        state: started
        daemon_reload: true
  
  post_tasks:
    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Binary: {{ paths.binary_path }}"
          - "Config: {{ paths.config_path }}"
          - "Logs: {{ paths.log_dir }}"
          - "Spooling: {{ paths.spool_dir }}"
          - "Container image: {{ container_image }}"
          - "Service: systemctl status {{ service.name }}"