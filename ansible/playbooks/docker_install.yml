---
- name: Install and configure ByteFreezer Proxy service (Docker binary extraction)
  hosts: all
  become: yes
  vars:
    bytefreezer_binary_dest: "/usr/local/bin/bytefreezer-proxy"
    bytefreezer_config_path: "/etc/bytefreezer-proxy/config.yaml"
    bytefreezer_log_dir: "/var/log/bytefreezer-proxy"
    bytefreezer_service_path: "/etc/systemd/system/bytefreezer-proxy.service"
    bytefreezer_logrotate_path: "/etc/logrotate.d/bytefreezer-proxy"
    bytefreezer_spooling_dir: "/var/spool/bytefreezer-proxy"
    github_repo_owner: "{{ bytefreezer_github_repo_owner | default('n0needt0') }}"
    version: "{{ bytefreezer_proxy_version | default('latest') }}"
    container_image: "ghcr.io/{{ github_repo_owner }}/bytefreezer-proxy:{{ version }}"

  pre_tasks:
    - name: Check if service already exists
      ansible.builtin.stat:
        path: "{{ bytefreezer_service_path }}"
      register: service_exists

    - name: Fail if service already installed
      fail:
        msg: "ByteFreezer Proxy service is already installed. Use docker_remove playbook first."
      when: service_exists.stat.exists

    - name: Verify Docker is installed and running
      ansible.builtin.service_facts:
      register: services

    - name: Check if Docker service exists
      fail:
        msg: "Docker is not installed or running. Please install Docker first."
      when: "'docker.service' not in services.ansible_facts.services or services.ansible_facts.services['docker.service'].state != 'running'"

    - name: Test Docker access
      ansible.builtin.shell: docker info
      register: docker_test
      failed_when: docker_test.rc != 0

  tasks:
    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: bytefreezer
      register: temp_dir

    - name: Pull binary from container image
      ansible.builtin.shell: |
        docker run --rm -v {{ temp_dir.path }}:/output \
          {{ container_image }} \
          sh -c "cp /bytefreezer-proxy /output/"
      register: docker_extract
      failed_when: docker_extract.rc != 0

    - name: Verify binary was extracted
      ansible.builtin.stat:
        path: "{{ temp_dir.path }}/bytefreezer-proxy"
      register: extracted_binary
      failed_when: not extracted_binary.stat.exists

    - name: Copy binary to /usr/local/bin
      ansible.builtin.copy:
        src: "{{ temp_dir.path }}/bytefreezer-proxy"
        dest: "{{ bytefreezer_binary_dest }}"
        mode: '0755'
        remote_src: yes

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_config_path | dirname }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_log_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure spooling directory exists
      ansible.builtin.file:
        path: "{{ bytefreezer_spooling_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Generate configuration file
      ansible.builtin.template:
        src: config.yaml.j2
        dest: "{{ bytefreezer_config_path }}"
        owner: root
        group: root
        mode: '0644'
 
    - name: Install logrotate configuration
      ansible.builtin.copy:
        dest: "{{ bytefreezer_logrotate_path }}"
        content: |
          {{ bytefreezer_log_dir }}/*.log {
            daily
            rotate 7
            compress
            missingok
            notifempty
            create 0644 root root
            sharedscripts
            postrotate
              systemctl restart bytefreezer-proxy >/dev/null 2>&1 || true
            endscript
          }
        mode: '0644'
  
    - name: Create systemd service file
      ansible.builtin.template:
        src: bytefreezer-proxy.service.j2
        dest: "{{ bytefreezer_service_path }}"
        mode: '0644'
      notify: Reload systemd

    - name: Enable and start service
      ansible.builtin.systemd:
        name: bytefreezer-proxy
        enabled: yes
        state: started
        daemon_reload: true
  
  post_tasks:
    - name: Display installation status
      debug:
        msg:
          - "ByteFreezer Proxy installation completed!"
          - "Binary: {{ bytefreezer_binary_dest }}"
          - "Config: {{ bytefreezer_config_path }}"
          - "Logs: {{ bytefreezer_log_dir }}"
          - "Spooling: {{ bytefreezer_spooling_dir }}"
          - "Container image: {{ container_image }}"
          - "Service: systemctl status bytefreezer-proxy"

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true