name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  GO_VERSION: '1.24.4'
  BINARY_NAME: 'bytefreezer-proxy'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test on Main Branch
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, arm64, arm]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        if [ "${{ github.ref_type }}" != "tag" ]; then
          VERSION="main-${GITHUB_SHA:0:8}"
        fi
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        go build \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}" \
          -o ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }} .

    - name: Create tarball
      run: |
        mkdir -p release
        tar -czf release/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz \
          ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }} \
          config.yaml \
          README.md

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        path: release/${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  docker:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ env.BINARY_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release with Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        files: ./artifacts/*/*.tar.gz
        generate_release_notes: true
        body: |
          ## üöÄ ByteFreezer Proxy ${{ github.ref_name }}
          
          ### üì¶ Installation
          
          **Docker (Recommended):**
          ```bash
          docker pull ghcr.io/${{ github.repository_owner }}/${{ env.BINARY_NAME }}:${{ github.ref_name }}
          ```
          
          **Binary Download:**
          - **Linux AMD64**: `bytefreezer-proxy-linux-amd64.tar.gz`
          - **Linux ARM64**: `bytefreezer-proxy-linux-arm64.tar.gz`
          - **Linux ARM**: `bytefreezer-proxy-linux-arm.tar.gz`
          
          **Quick Start:**
          ```bash
          # Extract binary
          tar -xzf bytefreezer-proxy-linux-amd64.tar.gz
          
          # Configure (edit config.yaml as needed)
          ./bytefreezer-proxy-linux-amd64
          ```
          
          ### üéØ Deployment
          
          **Ansible (Production):**
          ```bash
          # Use the included Ansible playbooks
          cd ansible
          ansible-playbook -i inventories/hosts.yml playbooks/deploy.yml
          ```
          
          **Docker Compose:**
          ```bash
          # Use the included docker-compose.yml
          docker-compose up -d
          ```
          
          ### üìö Documentation
          
          - [Build Guide](BUILD.md)
          - [AWX Deployment Guide](AWX_DEPLOYMENT_GUIDE.md)
          - [GitHub Actions Troubleshooting](GITHUB_ACTIONS_TROUBLESHOOTING.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Deployment Notification
    needs: [release]
    runs-on: ubuntu-latest
    if: always() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "‚úÖ ByteFreezer Proxy ${{ github.ref_name }} released successfully!"
        echo "Docker image: ghcr.io/${{ github.repository_owner }}/${{ env.BINARY_NAME }}:${{ github.ref_name }}"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå ByteFreezer Proxy ${{ github.ref_name }} release failed!"
        exit 1