version: '3.8'

services:
  bytefreezer-proxy:
    image: ghcr.io/n0needt0/bytefreezer-proxy:latest
    container_name: bytefreezer-proxy
    restart: unless-stopped
    
    # Network configuration
    ports:
      - "8088:8088/tcp"    # API/Health endpoint
      - "2056:2056/udp"    # Syslog data
      - "2057:2057/udp"    # eBPF data
      - "2058:2058/udp"    # Application logs
    
    # Volume mounts
    volumes:
      # Configuration (modify ./config/config.yaml as needed)
      - ./config/config.yaml:/etc/bytefreezer-proxy/config.yaml:ro
      
      # Persistent data directories
      - bytefreezer-proxy-logs:/var/log/bytefreezer-proxy
      - bytefreezer-proxy-spool:/var/spool/bytefreezer-proxy
    
    # Environment variables
    environment:
      - CONFIG_FILE=/etc/bytefreezer-proxy/config.yaml
      - TZ=UTC
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    
    # Temporary filesystems for writable areas
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    
    # Labels for container management
    labels:
      - "com.bytefreezer.component=proxy"
      - "com.bytefreezer.environment=production"
      - "traefik.enable=true"
      - "traefik.http.routers.bytefreezer-proxy.rule=Host(`proxy.bytefreezer.local`)"
      - "traefik.http.services.bytefreezer-proxy.loadbalancer.server.port=8088"

  # Optional: Mock receiver for testing
  mock-receiver:
    image: nginx:alpine
    container_name: mock-bytefreezer-receiver
    restart: unless-stopped
    profiles:
      - testing
    ports:
      - "8080:80/tcp"
    volumes:
      - ./test/nginx.conf:/etc/nginx/nginx.conf:ro
    labels:
      - "com.bytefreezer.component=mock-receiver"
      - "com.bytefreezer.environment=testing"

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bytefreezer-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090/tcp"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    labels:
      - "com.bytefreezer.component=prometheus"
      - "com.bytefreezer.environment=monitoring"

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bytefreezer-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000/tcp"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    labels:
      - "com.bytefreezer.component=grafana"
      - "com.bytefreezer.environment=monitoring"

# Named volumes for persistent data
volumes:
  bytefreezer-proxy-logs:
    driver: local
    driver_opts:
      type: none
      device: ./data/logs
      o: bind
      
  bytefreezer-proxy-spool:
    driver: local
    driver_opts:
      type: none
      device: ./data/spool
      o: bind
      
  prometheus-data:
    driver: local
    
  grafana-data:
    driver: local

# Custom networks for better isolation
networks:
  default:
    name: bytefreezer
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16